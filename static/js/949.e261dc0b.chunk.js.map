{"version":3,"file":"static/js/949.e261dc0b.chunk.js","mappings":"2PAGaA,EAAiBC,EAAAA,GAAAA,OAAH,8bAmBdC,EAAaD,EAAAA,GAAAA,KAAH,8KAUVE,EAAeF,EAAAA,GAAAA,OAAH,8XAgBZG,EAAcH,EAAAA,GAAAA,MAAH,wL,SC3CVI,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAEzB,OACA,SAACN,EAAD,WACF,UAACE,EAAD,CAAaI,SAAUA,EAAvB,WACE,SAACH,EAAD,CAAcI,KAAK,SAAnB,UACE,iBAAMC,UAAU,eAAhB,uBAGU,SAACJ,EAAD,CAEVK,KAAK,cACLD,UAAU,QACVD,KAAK,OACLG,aAAa,MACbC,WAAS,EACTC,YAAY,iCAOjB,E,mCCzBYC,EAAYZ,EAAAA,GAAAA,GAAH,0CAITa,EAAWb,EAAAA,GAAAA,GAAH,wDAKRc,GAAWd,EAAAA,EAAAA,IAAOe,EAAAA,GAAPf,CAAH,+CCyDrB,EA7DgB,WAGZ,IAAMgB,GAAWC,EAAAA,EAAAA,MAGjB,GAAsDC,EAAAA,EAAAA,UAAS,IAA/D,eAAOC,EAAP,KAA4BC,EAA5B,KAGA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAGMC,EAAaF,EAAaG,IAAI,SACpCC,QAAQC,IAAIH,IAEZI,EAAAA,EAAAA,YAAU,WAAM,wCAGZ,gGAESJ,EAFT,kEAI4BK,EAAAA,EAAAA,IAAkBL,GAJ9C,OAIUM,EAJV,OAKIV,EAAuBU,EAASC,SAChCL,QAAQC,IAAIG,GANhB,kDASAJ,QAAQC,IAAR,MATA,2DAHY,0DAkBhBK,EAEC,GAAE,CAACR,IAaJ,OAAKL,GAKD,iCACI,SAACf,EAAD,CAAWC,SAfY,SAAA4B,GAC3BA,EAAEC,iBACFR,QAAQC,IAAIM,EAAEE,OAAOC,YAAYC,OACjC,IAAMA,EAAQJ,EAAEE,OAAOC,YAAYC,MAGnCd,EAAgB,CAACe,MAAMD,GAC1B,KASO,SAACzB,EAAD,UAAYO,EAAoBoB,KAAI,SAAAC,GAAM,OAAI,SAAC3B,EAAD,WAA0B,SAACC,EAAD,CAAU2B,GAAE,kBAAaD,EAAOE,IAAMC,MAAO,CAACC,KAAM5B,GAApD,SAAgEwB,EAAOK,SAAlFL,EAAOE,GAA1B,SAPf,IAWtC,C","sources":["components/SearchBar/SearchBar.styled.jsx","components/SearchBar/SearchBar.jsx","components/Movies/Movies.styled.jsx","components/Movies/Movies.jsx"],"sourcesContent":["import styled from \"styled-components\"\n\n// added css styled to SearchBar\nexport const SearchbarStyle = styled.header`top: 0;\n  left: 0;\n  position: sticky;\n  z-index: 1100;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 64px;\n  padding-right: 24px;\n  padding-left: 24px;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  color: #fff;\n  background-color: #3f51b5;\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n}`\n\n\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n`\n\nexport const SearchButton = styled.button` \n display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  background-image: url('https://image.flaticon.com/icons/svg/149/149852.svg');\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n`\n\n\nexport const SearchInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n`","\nimport { SearchbarStyle, SearchButton, SearchForm, SearchInput } from \"./SearchBar.styled\";\n\nimport PropTypes from 'prop-types'\n\nexport  const SearchBar = ({ onSubmit }) => {\n  // console.log(stringQuery)\n    return (\n    <SearchbarStyle>\n  <SearchForm  onSubmit={onSubmit}>\n    <SearchButton type=\"submit\"  >\n      <span className=\"button-label\">Search</span>\n    </SearchButton>\n\n                <SearchInput\n           \n      name=\"movieString\"\n      className=\"input\"\n      type=\"text\"\n      autoComplete=\"off\"\n      autoFocus\n      placeholder=\"Search images and photos\"\n      \n      \n    />\n  </SearchForm>\n</SearchbarStyle>\n)\n}\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.string\n}","import { Link } from \"react-router-dom\"\nimport styled from \"styled-components\"\n\nexport const MovieList = styled.ul`\nlist-style:none;\n`\n\nexport const ListItem = styled.li`\ncolor:black;\nfont-weight:800;\n`\n\nexport const LinkItem = styled(Link)`\ntext-decoration:none;\n`","import { SearchBar } from \"components/SearchBar/SearchBar\"\nimport { fetchMoviesByName } from \"components/api\"\nimport { useEffect, useState } from \"react\";\nimport { useLocation, useSearchParams } from \"react-router-dom\";\nimport { LinkItem, ListItem, MovieList } from \"./Movies.styled\";\n\n\n\n const Movies = () => {\n\n    //saving current location os we can pass it to the MovieDetails (so we can go back without losing all the searchparams)\n    const location = useLocation()\n    \n    // declared state to save movies, fetched by name for render in return\n    const [fetchedMoviesByName, setFetchedMoviesByName] = useState([]);\n    \n    // declared searchParams so value from input can be shown in the URL\n    const [searchParams, setSearchParams] = useSearchParams()\n    \n    // saving searchParams string from the URL string to variable. This way no need to use useState for a query string.\n    const movieQuery = searchParams.get('query');\n    console.log(movieQuery)\n\n    useEffect(() => {\n\n        // fetchData is declared inside useEffect. It calls fetchMoviesByName function from the api file. ComponentDidMount fetchis skipped thanks to \"if\" check\n        async function fetchData() {\n            try {\n            if (!movieQuery) {return}\n            \n            const response = await (fetchMoviesByName(movieQuery))\n            setFetchedMoviesByName(response.results)\n            console.log(response)\n        \n      } catch (error) {\n        console.log(error)\n      }\n     \n      \n        }\n        \n    fetchData()\n    \n    }, [movieQuery])\n\n  \n    // reading SearchBar input value and sending to searchParams\n    const onSearchBarValueSubmit = e => {\n        e.preventDefault()\n        console.log(e.target.movieString.value)\n        const value = e.target.movieString.value\n\n         // declared searchParams so value from input can be shown in the URL\n        setSearchParams({query:value})\n    }\n\n    if (!fetchedMoviesByName) { return null }\n    \n\n    \n    return (\n        <>\n            <SearchBar onSubmit={onSearchBarValueSubmit}/>\n            <MovieList>{fetchedMoviesByName.map(result => <ListItem key={result.id}><LinkItem to={`/movies/${result.id}`} state={{from: location}}>{result.title}</LinkItem></ListItem>)}</MovieList>\n        </>\n        \n    )\n}\n\nexport default Movies\n"],"names":["SearchbarStyle","styled","SearchForm","SearchButton","SearchInput","SearchBar","onSubmit","type","className","name","autoComplete","autoFocus","placeholder","MovieList","ListItem","LinkItem","Link","location","useLocation","useState","fetchedMoviesByName","setFetchedMoviesByName","useSearchParams","searchParams","setSearchParams","movieQuery","get","console","log","useEffect","fetchMoviesByName","response","results","fetchData","e","preventDefault","target","movieString","value","query","map","result","to","id","state","from","title"],"sourceRoot":""}